{"version":3,"sources":["../../lib/load-custom-routes.ts"],"names":["allowedStatusCodes","Set","allowedHasTypes","getRedirectStatus","route","statusCode","permanent","PERMANENT_REDIRECT_STATUS","TEMPORARY_REDIRECT_STATUS","normalizeRouteRegex","regex","replace","checkRedirect","invalidParts","hadInvalidStatus","has","push","checkHeader","Array","isArray","headers","header","key","value","tryParsePath","handleUrl","result","routePath","parsedDestination","pathname","hash","tokens","pathToRegexp","parse","tokensToRegexp","err","errMatches","message","match","position","parseInt","console","error","fill","join","experimentalHasWarn","Log","warn","checkCustomRoutes","routes","type","process","exit","numInvalidRoutes","hadInvalidHas","allowedKeys","add","JSON","stringify","basePath","destination","startsWith","source","keys","Object","invalidKeys","filter","locale","invalidHasItems","hasItem","invalidHasParts","length","itemStr","_route","sourceTokens","hasSegments","matcher","RegExp","lexer","Lexer","profile","lexerProfiles","js","namedGroups","forEach","groupKey","unnamedInDest","token","name","unnamedIndex","size","destTokens","destinationParseFailed","sourceSegments","map","item","Boolean","invalidDestSegments","hasInvalidKeys","hasInvalidParts","processRoutes","config","_routes","newRoutes","defaultLocales","i18n","domains","defaultLocale","base","http","domain","r","srcBasePath","isExternal","destBasePath","locales","trailingSlash","loadRedirects","redirects","loadRewrites","rewrites","beforeFiles","afterFiles","fallback","_rewrites","every","loadHeaders","loadCustomRoutes","Promise","all","unshift","undefined","internal"],"mappings":"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","sourcesContent":["import { parse as parseUrl } from 'url'\nimport { NextConfig } from '../next-server/server/config'\nimport * as pathToRegexp from 'next/dist/compiled/path-to-regexp'\nimport escapeStringRegexp from 'next/dist/compiled/escape-string-regexp'\nimport {\n  PERMANENT_REDIRECT_STATUS,\n  TEMPORARY_REDIRECT_STATUS,\n} from '../next-server/lib/constants'\nimport { execOnce } from '../next-server/lib/utils'\nimport * as Log from '../build/output/log'\n// @ts-ignore\nimport Lexer from 'next/dist/compiled/regexr-lexer/lexer'\n// @ts-ignore\nimport lexerProfiles from 'next/dist/compiled/regexr-lexer/profiles'\n\nexport type RouteHas =\n  | {\n      type: 'header' | 'query' | 'cookie'\n      key: string\n      value?: string\n    }\n  | {\n      type: 'host'\n      key?: undefined\n      value: string\n    }\n\nexport type Rewrite = {\n  source: string\n  destination: string\n  basePath?: false\n  locale?: false\n  has?: RouteHas[]\n}\n\nexport type Header = {\n  source: string\n  basePath?: false\n  locale?: false\n  headers: Array<{ key: string; value: string }>\n  has?: RouteHas[]\n}\n\n// internal type used for validation (not user facing)\nexport type Redirect = {\n  source: string\n  destination: string\n  basePath?: false\n  locale?: false\n  has?: RouteHas[]\n  statusCode?: number\n  permanent?: boolean\n}\n\nexport const allowedStatusCodes = new Set([301, 302, 303, 307, 308])\nconst allowedHasTypes = new Set(['header', 'cookie', 'query', 'host'])\n\nexport function getRedirectStatus(route: {\n  statusCode?: number\n  permanent?: boolean\n}): number {\n  return (\n    route.statusCode ||\n    (route.permanent ? PERMANENT_REDIRECT_STATUS : TEMPORARY_REDIRECT_STATUS)\n  )\n}\n\nexport function normalizeRouteRegex(regex: string) {\n  // clean up un-necessary escaping from regex.source which turns / into \\\\/\n  return regex.replace(/\\\\\\//g, '/')\n}\n\nfunction checkRedirect(\n  route: Redirect\n): { invalidParts: string[]; hadInvalidStatus: boolean } {\n  const invalidParts: string[] = []\n  let hadInvalidStatus: boolean = false\n\n  if (route.statusCode && !allowedStatusCodes.has(route.statusCode)) {\n    hadInvalidStatus = true\n    invalidParts.push(`\\`statusCode\\` is not undefined or valid statusCode`)\n  }\n  if (typeof route.permanent !== 'boolean' && !route.statusCode) {\n    invalidParts.push(`\\`permanent\\` is not set to \\`true\\` or \\`false\\``)\n  }\n\n  return {\n    invalidParts,\n    hadInvalidStatus,\n  }\n}\n\nfunction checkHeader(route: Header): string[] {\n  const invalidParts: string[] = []\n\n  if (!Array.isArray(route.headers)) {\n    invalidParts.push('`headers` field must be an array')\n  } else {\n    for (const header of route.headers) {\n      if (!header || typeof header !== 'object') {\n        invalidParts.push(\n          \"`headers` items must be object with { key: '', value: '' }\"\n        )\n        break\n      }\n      if (typeof header.key !== 'string') {\n        invalidParts.push('`key` in header item must be string')\n        break\n      }\n      if (typeof header.value !== 'string') {\n        invalidParts.push('`value` in header item must be string')\n        break\n      }\n    }\n  }\n  return invalidParts\n}\n\ntype ParseAttemptResult = {\n  error?: boolean\n  tokens?: pathToRegexp.Token[]\n}\n\nfunction tryParsePath(route: string, handleUrl?: boolean): ParseAttemptResult {\n  const result: ParseAttemptResult = {}\n  let routePath = route\n\n  try {\n    if (handleUrl) {\n      const parsedDestination = parseUrl(route, true)\n      routePath = `${parsedDestination.pathname!}${\n        parsedDestination.hash || ''\n      }`\n    }\n\n    // Make sure we can parse the source properly\n    result.tokens = pathToRegexp.parse(routePath)\n    pathToRegexp.tokensToRegexp(result.tokens)\n  } catch (err) {\n    // If there is an error show our error link but still show original error or a formatted one if we can\n    const errMatches = err.message.match(/at (\\d{0,})/)\n\n    if (errMatches) {\n      const position = parseInt(errMatches[1], 10)\n      console.error(\n        `\\nError parsing \\`${route}\\` ` +\n          `https://nextjs.org/docs/messages/invalid-route-source\\n` +\n          `Reason: ${err.message}\\n\\n` +\n          `  ${routePath}\\n` +\n          `  ${new Array(position).fill(' ').join('')}^\\n`\n      )\n    } else {\n      console.error(\n        `\\nError parsing ${route} https://nextjs.org/docs/messages/invalid-route-source`,\n        err\n      )\n    }\n    result.error = true\n  }\n\n  return result\n}\n\nexport type RouteType = 'rewrite' | 'redirect' | 'header'\n\nconst experimentalHasWarn = execOnce(() => {\n  Log.warn(\n    `'has' route field support is still experimental and not covered by semver, use at your own risk.`\n  )\n})\n\nfunction checkCustomRoutes(\n  routes: Redirect[] | Header[] | Rewrite[],\n  type: RouteType\n): void {\n  if (!Array.isArray(routes)) {\n    console.error(\n      `Error: ${type}s must return an array, received ${typeof routes}.\\n` +\n        `See here for more info: https://nextjs.org/docs/messages/routes-must-be-array`\n    )\n    process.exit(1)\n  }\n\n  let numInvalidRoutes = 0\n  let hadInvalidStatus = false\n  let hadInvalidHas = false\n\n  const allowedKeys = new Set<string>(['source', 'basePath', 'locale', 'has'])\n\n  if (type === 'rewrite') {\n    allowedKeys.add('destination')\n  }\n  if (type === 'redirect') {\n    allowedKeys.add('statusCode')\n    allowedKeys.add('permanent')\n    allowedKeys.add('destination')\n  }\n  if (type === 'header') {\n    allowedKeys.add('headers')\n  }\n\n  for (const route of routes) {\n    if (!route || typeof route !== 'object') {\n      console.error(\n        `The route ${JSON.stringify(\n          route\n        )} is not a valid object with \\`source\\` and \\`${\n          type === 'header' ? 'headers' : 'destination'\n        }\\``\n      )\n      numInvalidRoutes++\n      continue\n    }\n\n    if (\n      type === 'rewrite' &&\n      (route as Rewrite).basePath === false &&\n      !(\n        (route as Rewrite).destination.startsWith('http://') ||\n        (route as Rewrite).destination.startsWith('https://')\n      )\n    ) {\n      console.error(\n        `The route ${\n          (route as Rewrite).source\n        } rewrites urls outside of the basePath. Please use a destination that starts with \\`http://\\` or \\`https://\\` https://nextjs.org/docs/messages/invalid-external-rewrite`\n      )\n      numInvalidRoutes++\n      continue\n    }\n\n    const keys = Object.keys(route)\n    const invalidKeys = keys.filter((key) => !allowedKeys.has(key))\n    const invalidParts: string[] = []\n\n    if (typeof route.basePath !== 'undefined' && route.basePath !== false) {\n      invalidParts.push('`basePath` must be undefined or false')\n    }\n\n    if (typeof route.locale !== 'undefined' && route.locale !== false) {\n      invalidParts.push('`locale` must be undefined or false')\n    }\n\n    if (typeof route.has !== 'undefined' && !Array.isArray(route.has)) {\n      invalidParts.push('`has` must be undefined or valid has object')\n      hadInvalidHas = true\n    } else if (route.has) {\n      experimentalHasWarn()\n      const invalidHasItems = []\n\n      for (const hasItem of route.has) {\n        let invalidHasParts = []\n\n        if (!allowedHasTypes.has(hasItem.type)) {\n          invalidHasParts.push(`invalid type \"${hasItem.type}\"`)\n        }\n        if (typeof hasItem.key !== 'string' && hasItem.type !== 'host') {\n          invalidHasParts.push(`invalid key \"${hasItem.key}\"`)\n        }\n        if (\n          typeof hasItem.value !== 'undefined' &&\n          typeof hasItem.value !== 'string'\n        ) {\n          invalidHasParts.push(`invalid value \"${hasItem.value}\"`)\n        }\n        if (typeof hasItem.value === 'undefined' && hasItem.type === 'host') {\n          invalidHasParts.push(`value is required for \"host\" type`)\n        }\n\n        if (invalidHasParts.length > 0) {\n          invalidHasItems.push(\n            `${invalidHasParts.join(', ')} for ${JSON.stringify(hasItem)}`\n          )\n        }\n      }\n\n      if (invalidHasItems.length > 0) {\n        hadInvalidHas = true\n        const itemStr = `item${invalidHasItems.length === 1 ? '' : 's'}`\n\n        console.error(\n          `Invalid \\`has\\` ${itemStr}:\\n` + invalidHasItems.join('\\n')\n        )\n        console.error()\n        invalidParts.push(`invalid \\`has\\` ${itemStr} found`)\n      }\n    }\n\n    if (!route.source) {\n      invalidParts.push('`source` is missing')\n    } else if (typeof route.source !== 'string') {\n      invalidParts.push('`source` is not a string')\n    } else if (!route.source.startsWith('/')) {\n      invalidParts.push('`source` does not start with /')\n    }\n\n    if (type === 'header') {\n      invalidParts.push(...checkHeader(route as Header))\n    } else {\n      let _route = route as Rewrite | Redirect\n      if (!_route.destination) {\n        invalidParts.push('`destination` is missing')\n      } else if (typeof _route.destination !== 'string') {\n        invalidParts.push('`destination` is not a string')\n      } else if (\n        type === 'rewrite' &&\n        !_route.destination.match(/^(\\/|https:\\/\\/|http:\\/\\/)/)\n      ) {\n        invalidParts.push(\n          '`destination` does not start with `/`, `http://`, or `https://`'\n        )\n      }\n    }\n\n    if (type === 'redirect') {\n      const result = checkRedirect(route as Redirect)\n      hadInvalidStatus = hadInvalidStatus || result.hadInvalidStatus\n      invalidParts.push(...result.invalidParts)\n    }\n\n    let sourceTokens: pathToRegexp.Token[] | undefined\n\n    if (typeof route.source === 'string' && route.source.startsWith('/')) {\n      // only show parse error if we didn't already show error\n      // for not being a string\n      const { tokens, error } = tryParsePath(route.source)\n\n      if (error) {\n        invalidParts.push('`source` parse failed')\n      }\n      sourceTokens = tokens\n    }\n    const hasSegments = new Set<string>()\n\n    if (route.has) {\n      for (const hasItem of route.has) {\n        if (!hasItem.value && hasItem.key) {\n          hasSegments.add(hasItem.key)\n        }\n\n        if (hasItem.value) {\n          const matcher = new RegExp(`^${hasItem.value}$`)\n          const lexer = new Lexer()\n          lexer.profile = lexerProfiles.js\n          lexer.parse(`/${matcher.source}/`)\n\n          Object.keys(lexer.namedGroups).forEach((groupKey) => {\n            hasSegments.add(groupKey)\n          })\n\n          if (hasItem.type === 'host') {\n            hasSegments.add('host')\n          }\n        }\n      }\n    }\n\n    // make sure no unnamed patterns are attempted to be used in the\n    // destination as this can cause confusion and is not allowed\n    if (typeof (route as Rewrite).destination === 'string') {\n      if (\n        (route as Rewrite).destination.startsWith('/') &&\n        Array.isArray(sourceTokens)\n      ) {\n        const unnamedInDest = new Set()\n\n        for (const token of sourceTokens) {\n          if (typeof token === 'object' && typeof token.name === 'number') {\n            const unnamedIndex = new RegExp(`:${token.name}(?!\\\\d)`)\n            if ((route as Rewrite).destination.match(unnamedIndex)) {\n              unnamedInDest.add(`:${token.name}`)\n            }\n          }\n        }\n\n        if (unnamedInDest.size > 0) {\n          invalidParts.push(\n            `\\`destination\\` has unnamed params ${[...unnamedInDest].join(\n              ', '\n            )}`\n          )\n        } else {\n          const {\n            tokens: destTokens,\n            error: destinationParseFailed,\n          } = tryParsePath((route as Rewrite).destination, true)\n\n          if (destinationParseFailed) {\n            invalidParts.push('`destination` parse failed')\n          } else {\n            const sourceSegments = new Set(\n              sourceTokens\n                .map((item) => typeof item === 'object' && item.name)\n                .filter(Boolean)\n            )\n            const invalidDestSegments = new Set()\n\n            for (const token of destTokens!) {\n              if (\n                typeof token === 'object' &&\n                !sourceSegments.has(token.name) &&\n                !hasSegments.has(token.name as string)\n              ) {\n                invalidDestSegments.add(token.name)\n              }\n            }\n\n            if (invalidDestSegments.size) {\n              invalidParts.push(\n                `\\`destination\\` has segments not in \\`source\\` or \\`has\\` (${[\n                  ...invalidDestSegments,\n                ].join(', ')})`\n              )\n            }\n          }\n        }\n      }\n    }\n\n    const hasInvalidKeys = invalidKeys.length > 0\n    const hasInvalidParts = invalidParts.length > 0\n\n    if (hasInvalidKeys || hasInvalidParts) {\n      console.error(\n        `${invalidParts.join(', ')}${\n          invalidKeys.length\n            ? (hasInvalidParts ? ',' : '') +\n              ` invalid field${invalidKeys.length === 1 ? '' : 's'}: ` +\n              invalidKeys.join(',')\n            : ''\n        } for route ${JSON.stringify(route)}`\n      )\n      console.error()\n      numInvalidRoutes++\n    }\n  }\n\n  if (numInvalidRoutes > 0) {\n    if (hadInvalidStatus) {\n      console.error(\n        `\\nValid redirect statusCode values are ${[...allowedStatusCodes].join(\n          ', '\n        )}`\n      )\n    }\n    if (hadInvalidHas) {\n      console.error(\n        `\\nValid \\`has\\` object shape is ${JSON.stringify(\n          {\n            type: [...allowedHasTypes].join(', '),\n            key: 'the key to check for',\n            value: 'undefined or a value string to match against',\n          },\n          null,\n          2\n        )}`\n      )\n    }\n    console.error()\n    console.error(\n      `Error: Invalid ${type}${numInvalidRoutes === 1 ? '' : 's'} found`\n    )\n    process.exit(1)\n  }\n}\n\nexport interface CustomRoutes {\n  headers: Header[]\n  rewrites: {\n    fallback: Rewrite[]\n    afterFiles: Rewrite[]\n    beforeFiles: Rewrite[]\n  }\n  redirects: Redirect[]\n}\n\nfunction processRoutes<T>(\n  routes: T,\n  config: NextConfig,\n  type: 'redirect' | 'rewrite' | 'header'\n): T {\n  const _routes = (routes as any) as Array<{\n    source: string\n    locale?: false\n    basePath?: false\n    destination?: string\n  }>\n  const newRoutes: typeof _routes = []\n  const defaultLocales: Array<{\n    locale: string\n    base: string\n  }> = []\n\n  if (config.i18n && type === 'redirect') {\n    for (const item of config.i18n?.domains || []) {\n      defaultLocales.push({\n        locale: item.defaultLocale,\n        base: `http${item.http ? '' : 's'}://${item.domain}`,\n      })\n    }\n\n    defaultLocales.push({\n      locale: config.i18n.defaultLocale,\n      base: '',\n    })\n  }\n\n  for (const r of _routes) {\n    const srcBasePath =\n      config.basePath && r.basePath !== false ? config.basePath : ''\n    const isExternal = !r.destination?.startsWith('/')\n    const destBasePath = srcBasePath && !isExternal ? srcBasePath : ''\n\n    if (config.i18n && r.locale !== false) {\n      defaultLocales.forEach((item) => {\n        let destination\n\n        if (r.destination) {\n          destination = item.base\n            ? `${item.base}${destBasePath}${r.destination}`\n            : `${destBasePath}${r.destination}`\n        }\n\n        newRoutes.push({\n          ...r,\n          destination,\n          source: `${srcBasePath}/${item.locale}${r.source}`,\n        })\n      })\n\n      r.source = `/:nextInternalLocale(${config.i18n.locales\n        .map((locale: string) => escapeStringRegexp(locale))\n        .join('|')})${\n        r.source === '/' && !config.trailingSlash ? '' : r.source\n      }`\n\n      if (r.destination && r.destination?.startsWith('/')) {\n        r.destination = `/:nextInternalLocale${\n          r.destination === '/' && !config.trailingSlash ? '' : r.destination\n        }`\n      }\n    }\n    r.source = `${srcBasePath}${r.source}`\n\n    if (r.destination) {\n      r.destination = `${destBasePath}${r.destination}`\n    }\n    newRoutes.push(r)\n  }\n  return (newRoutes as any) as T\n}\n\nasync function loadRedirects(config: NextConfig) {\n  if (typeof config.redirects !== 'function') {\n    return []\n  }\n  let redirects = await config.redirects()\n  checkCustomRoutes(redirects, 'redirect')\n  return processRoutes(redirects, config, 'redirect')\n}\n\nasync function loadRewrites(config: NextConfig) {\n  if (typeof config.rewrites !== 'function') {\n    return {\n      beforeFiles: [],\n      afterFiles: [],\n      fallback: [],\n    }\n  }\n  const _rewrites = await config.rewrites()\n  let beforeFiles: Rewrite[] = []\n  let afterFiles: Rewrite[] = []\n  let fallback: Rewrite[] = []\n\n  if (\n    !Array.isArray(_rewrites) &&\n    typeof _rewrites === 'object' &&\n    Object.keys(_rewrites).every(\n      (key) =>\n        key === 'beforeFiles' || key === 'afterFiles' || key === 'fallback'\n    )\n  ) {\n    beforeFiles = _rewrites.beforeFiles || []\n    afterFiles = _rewrites.afterFiles || []\n    fallback = _rewrites.fallback || []\n  } else {\n    afterFiles = _rewrites as any\n  }\n\n  checkCustomRoutes(beforeFiles, 'rewrite')\n  checkCustomRoutes(afterFiles, 'rewrite')\n  checkCustomRoutes(fallback, 'rewrite')\n\n  return {\n    beforeFiles: processRoutes(beforeFiles, config, 'rewrite'),\n    afterFiles: processRoutes(afterFiles, config, 'rewrite'),\n    fallback: processRoutes(fallback, config, 'rewrite'),\n  }\n}\n\nasync function loadHeaders(config: NextConfig) {\n  if (typeof config.headers !== 'function') {\n    return []\n  }\n  let headers = await config.headers()\n  checkCustomRoutes(headers, 'header')\n  return processRoutes(headers, config, 'header')\n}\n\nexport default async function loadCustomRoutes(\n  config: NextConfig\n): Promise<CustomRoutes> {\n  const [headers, rewrites, redirects] = await Promise.all([\n    loadHeaders(config),\n    loadRewrites(config),\n    loadRedirects(config),\n  ])\n\n  if (config.trailingSlash) {\n    redirects.unshift(\n      {\n        source: '/:file((?!\\\\.well-known(?:/.*)?)(?:[^/]+/)*[^/]+\\\\.\\\\w+)/',\n        destination: '/:file',\n        permanent: true,\n        locale: config.i18n ? false : undefined,\n        internal: true,\n      } as Redirect,\n      {\n        source: '/:notfile((?!\\\\.well-known(?:/.*)?)(?:[^/]+/)*[^/\\\\.]+)',\n        destination: '/:notfile/',\n        permanent: true,\n        locale: config.i18n ? false : undefined,\n        internal: true,\n      } as Redirect\n    )\n    if (config.basePath) {\n      redirects.unshift({\n        source: config.basePath,\n        destination: config.basePath + '/',\n        permanent: true,\n        basePath: false,\n        locale: config.i18n ? false : undefined,\n        internal: true,\n      } as Redirect)\n    }\n  } else {\n    redirects.unshift({\n      source: '/:path+/',\n      destination: '/:path+',\n      permanent: true,\n      locale: config.i18n ? false : undefined,\n      internal: true,\n    } as Redirect)\n    if (config.basePath) {\n      redirects.unshift({\n        source: config.basePath + '/',\n        destination: config.basePath,\n        permanent: true,\n        basePath: false,\n        locale: config.i18n ? false : undefined,\n        internal: true,\n      } as Redirect)\n    }\n  }\n\n  return {\n    headers,\n    rewrites,\n    redirects,\n  }\n}\n"]}